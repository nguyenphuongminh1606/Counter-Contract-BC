#pragma version 10

smart_contracts.counter.contract.Counter.approval_program:
    // smart_contracts/counter/contract.py:5
    // class Counter(ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@8
    method "add(uint64,uint64)uint64"
    method "sub(uint64,uint64)uint64"
    method "mul(uint64,uint64)uint64"
    method "div(uint64,uint64)uint64"
    txna ApplicationArgs 0
    match main_add_route@2 main_sub_route@3 main_mul_route@4 main_div_route@5
    err // reject transaction

main_add_route@2:
    // smart_contracts/counter/contract.py:6
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/counter/contract.py:5
    // class Counter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // smart_contracts/counter/contract.py:6
    // @abimethod()
    callsub add
    itob
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_sub_route@3:
    // smart_contracts/counter/contract.py:10
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/counter/contract.py:5
    // class Counter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // smart_contracts/counter/contract.py:10
    // @abimethod()
    callsub sub
    itob
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_mul_route@4:
    // smart_contracts/counter/contract.py:15
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/counter/contract.py:5
    // class Counter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // smart_contracts/counter/contract.py:15
    // @abimethod()
    callsub mul
    itob
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_div_route@5:
    // smart_contracts/counter/contract.py:19
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/counter/contract.py:5
    // class Counter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // smart_contracts/counter/contract.py:19
    // @abimethod()
    callsub div
    itob
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_bare_routing@8:
    // smart_contracts/counter/contract.py:5
    // class Counter(ARC4Contract):
    txn OnCompletion
    !
    assert // reject transaction
    txn ApplicationID
    !
    assert // is creating
    int 1
    return


// smart_contracts.counter.contract.Counter.add(a: uint64, b: uint64) -> uint64:
add:
    // smart_contracts/counter/contract.py:6-7
    // @abimethod()
    // def add(self, a: UInt64, b: UInt64) -> UInt64:  # unsigned integer
    proto 2 1
    // smart_contracts/counter/contract.py:8
    // return a + b
    frame_dig -2
    frame_dig -1
    +
    retsub


// smart_contracts.counter.contract.Counter.sub(a: uint64, b: uint64) -> uint64:
sub:
    // smart_contracts/counter/contract.py:10-11
    // @abimethod()
    // def sub(self, a: UInt64, b: UInt64) -> UInt64:
    proto 2 1
    // smart_contracts/counter/contract.py:12
    // assert a > b, "a must be grander"
    frame_dig -2
    frame_dig -1
    >
    assert // a must be grander
    // smart_contracts/counter/contract.py:13
    // return a - b
    frame_dig -2
    frame_dig -1
    -
    retsub


// smart_contracts.counter.contract.Counter.mul(a: uint64, b: uint64) -> uint64:
mul:
    // smart_contracts/counter/contract.py:15-16
    // @abimethod()
    // def mul(self, a: UInt64, b: UInt64) -> UInt64:
    proto 2 1
    // smart_contracts/counter/contract.py:17
    // return a * b
    frame_dig -2
    frame_dig -1
    *
    retsub


// smart_contracts.counter.contract.Counter.div(a: uint64, b: uint64) -> uint64:
div:
    // smart_contracts/counter/contract.py:19-20
    // @abimethod()
    // def div(self, a: UInt64, b: UInt64) -> UInt64:
    proto 2 1
    // smart_contracts/counter/contract.py:21
    // return a // b
    frame_dig -2
    frame_dig -1
    /
    retsub
